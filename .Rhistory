shiny::runApp()
library(shiny)
library(sequoia)
library(Rcpp)
library(pedantics)
library(kinship2)
library(shinycssloaders)
runApp()
setwd("C:/Users/DerrLab/Desktop/ParentageApp/data")
input.VCF <- read.vcfR("test2.vcf")
library(ggplot2)
library(vcfR)
library(poppr)
library(ape)
library(RColorBrewer)
library(reshape2)
input.VCF <- read.vcfR("test2.vcf")
VCFFile <- input$VCF
runApp('C:/Users/DerrLab/Desktop/ParentageApp')
runApp('C:/Users/DerrLab/Desktop/ParentageApp')
runApp('C:/Users/DerrLab/Desktop/ParentageApp')
input.VCF
pop.data <- read.table("vcfpops.txt", sep = "\t", header = TRUE)
View(pop.data)
# We can now check that all the samples in the VCF and the population data frame are included:
all(colnames(input.VCF@gt)[-1] == pop.data$AccessID)
# Converting the dataset to a genlight object
gl.object <- vcfR2genlight(input.VCF)
# Specify ploidy
ploidy(gl.object) <- 2
# Add population data to genlight object
pop(gl.object) <- pop.data$Population
gl.object
View(input.VCF)
View(gl.object)
gl.object@pop
gl.object@ind.names
View(pop.data)
LHis <- read.csv(LHis.csv)
setwd("C:/Users/DerrLab/Desktop/ParentageApp/data")
LHis <- read.csv(LHis.csv)
LHis <- read.csv("LHis.csv")
View(LHis)
LHis$pop <- c("pop 1", "pop 2")
LHis$pop <- "pop 1"
View(LHis)
Geno <- read.csv("Geno.csv")
levels(LHis$Sex) <- sub("female", "1", levels(LHis$Sex))
levels(LHis$Sex) <- sub("male", "2", levels(LHis$Sex))
View(LHis)
ParOUT <- sequoia(GenoM = Geno,
LifeHistData = LHis,
MaxSibIter = 0)
Geno <- as.matrix(Geno)
View(Geno)
SeqOUT <- sequoia(GenoM = Geno,
SeqList = ParOUT,
MaxSibIter = 5)
ParOUT <- sequoia(GenoM = Geno,
LifeHistData = LHis,
MaxSibIter = 0)
LHis1 <- LHis[, 1]
LHis1
LHis1 <- LHis[, 1-3]
View(LHis1)
View(LHis)
View(LHis1)
View(LHis)
LHis1 <- LHis[, c(1,2,3)]
View(LHis1)
ParOUT <- sequoia(GenoM = Geno,
LifeHistData = LHis,
MaxSibIter = 0)
ParOUT <- sequoia(GenoM = Geno,
LifeHistData = LHis1,
MaxSibIter = 0)
View(LHis1)
View(Geno)
runApp('C:/Users/DerrLab/Desktop/ParentageApp')
runApp('C:/Users/DerrLab/Desktop/ParentageApp')
LHis <- read.csv("LHis.csv")
View(LHis)
View(LHis)
LHis$pop <- "pop2"
View(LHis)
LHis[, -4]
LHis[, -4]
LHis$pop <- "pop2"
LHis[-LHis$pop]
LHis[-pop]
View(LHis)
View(LHis)
LHis[ , c("ID", "Sex", "BY")]
LHis[ , c("ID", "BY","Sex")]
runApp('C:/Users/DerrLab/Desktop/ParentageApp')
input.VCF <- read.vcfR("test2.vcf")
subset.1 <- sample(size = 1000, x= c(1:nrow(input.VCF)))
input.VCF.sub1 <- input.VCF[subset.1,]
View(input.VCF.sub1)
input.VCF.sub1
write.vcf(input.VCF.sub1, "VCFsub1")
VCF <- read.vcfR("VCFsub1")
VCF
runApp('C:/Users/DerrLab/Desktop/ParentageApp')
runApp('C:/Users/DerrLab/Desktop/ParentageApp')
runApp('C:/Users/DerrLab/Desktop/ParentageApp')
runApp('C:/Users/DerrLab/Desktop/ParentageApp')
runApp('C:/Users/DerrLab/Desktop/ParentageApp')
runApp('C:/Users/DerrLab/Desktop/ParentageApp')
runApp('C:/Users/DerrLab/Desktop/ParentageApp')
PopFile <- input$Pop
runApp('C:/Users/DerrLab/Desktop/ParentageApp')
runApp('C:/Users/DerrLab/Desktop/ParentageApp')
runApp('C:/Users/DerrLab/Desktop/ParentageApp')
runApp('C:/Users/DerrLab/Desktop/ParentageApp')
pop.data <- read.table("vcfpops.txt", sep = "\t", header = TRUE)
# We can now check that all the samples in the VCF and the population data frame are included:
all(colnames(VCF@gt)[-1] == pop.data$AccessID)
# Converting the dataset to a genlight object
gl.object <- vcfR2genlight(VCF)
# Specify ploidy
ploidy(gl.object) <- 2
# Add population data to genlight object
pop(gl.object) <- pop.data$Population
gl.object
pca <- glPca(gl.object)
pca <- glPca(gl.object)
title(ylab="Percent of variance\nexplained", line = 2)
title(xlab="Eigenvalues", line = 1)
barplot(100*pca$eig/sum(pca$eig), col = heat.colors(50), main="PCA Eigenvalues")
PCA <- glPca(gl.object)
View(PCA)
barplot(100*pca$eig/sum(pca$eig), col = heat.colors(50), main="PCA Eigenvalues")
pca <- glPca(gl.object)
pca <- glPca(gl.object, nf= 3)
barplot(100*pca$eig/sum(pca$eig), col = heat.colors(50), main="PCA Eigenvalues")
title(ylab="Percent of variance\nexplained", line = 2)
title(xlab="Eigenvalues", line = 1)
pca <- glPca(gl.object)
barplot(100*pca$eig/sum(pca$eig), col = heat.colors(50), main="PCA Eigenvalues")
title(ylab="Percent of variance\nexplained", line = 2)
title(xlab="Eigenvalues", line = 1)
pca <- glPca(gl.object)
pca <- glPca(gl.object, nf=4)
pca <- glPca(gl.object, nf = 5)
barplot(100*pca$eig/sum(pca$eig), col = heat.colors(50), main="PCA Eigenvalues")
title(ylab="Percent of variance\nexplained", line = 2)
title(xlab="Eigenvalues", line = 1)
runApp('C:/Users/DerrLab/Desktop/ParentageApp')
library(ggplot2)
library(vcfR)
library(poppr)
library(ape)
library(RColorBrewer)
library(reshape2)
pca <- glPca(gl.object, nf = 3)
barplot(100*pca$eig/sum(pca$eig), col = heat.colors(50), main="PCA Eigenvalues")
plot + title(ylab="Percent of variance\nexplained", line = 2) + title(xlab="Eigenvalues", line = 1)
pca <- glPca(gl.object, nf = 3)
plot <- barplot(100*pca$eig/sum(pca$eig), col = heat.colors(50), main="PCA Eigenvalues")
plot + title(ylab="Percent of variance\nexplained", line = 2)
plot + title(xlab="Eigenvalues", line = 1)
shiny::runApp()
pca <- glPca(gl.object, nf = 3)
plot <- barplot(100*pca$eig/sum(pca$eig), col = heat.colors(50), main="PCA Eigenvalues")
plot<- plot + title(ylab="Percent of variance\nexplained", line = 2)
plot + title(xlab="Eigenvalues", line = 1)
pca <- glPca(gl.object, nf = 3)
plot <- barplot(100*pca$eig/sum(pca$eig), col = heat.colors(50), main="PCA Eigenvalues",
ylab="Percent of variance\nexplained",  xlab="Eigenvalues")
plot <- barplot(100*pca$eig/sum(pca$eig), col = heat.colors(50), main="PCA Eigenvalues",
ylab="Percent of variance explained",  xlab="Eigenvalues")
runApp()
pca.scores <- as.data.frame(pca$scores)
pca.scores$pop <- pop(gl.object)
set.seed(9)
p <- ggplot(pca.scores, aes(x=PC1, y=PC2, colour=pop))
p <- p + geom_point(size=2)
p <- p + stat_ellipse(level = 0.95, size = 1)
p <- p + scale_color_manual(values = cols)
p <- p + geom_hline(yintercept = 0)
p <- p + geom_vline(xintercept = 0)
p <- p + theme_bw()
p
p <- ggplot(pca.scores, aes(x=PC1, y=PC2, colour=pop)) +
geom_point(size=2) +
stat_ellipse(level = 0.95, size = 1) +
scale_color_manual(values = cols) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
theme_bw()
p <- ggplot(pca.scores, aes(x=PC1, y=PC2, colour=pop)) +
geom_point(size=2) +
stat_ellipse(level = 0.95, size = 1) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
theme_bw()
p <- ggplot(pca.scores, aes(x=PC1, y=PC2, colour=pop)) +
geom_point(size=2) +
stat_ellipse(level = 0.95, size = 1) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
theme_bw()
p <- ggplot(pca.scores, aes(x=PC1, y=PC2, colour=pop)) +
geom_point(size=2) +
stat_ellipse(level = 0.95, size = 1) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
theme_bw()
p
p <- ggplot(pca.scores, aes(x=PC1, y=PC2, colour=pop)) +
geom_point(size=2) +
stat_ellipse(level = 0.95, size = 1) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
p
p <- ggplot(pca.scores, aes(x=PC1, y=PC2, colour=pop)) +
geom_point(size=2) +
stat_ellipse(level = 0.95, size = 1) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0)
p
runApp()
runApp()
View(pop.data)
nPop(pop.data)
nPop(gl.object$pop)
gl.object$pop
levels(gl.object$pop)
nlevels(gl.object$pop)
nlevels(gl.object$pop)-1
############
pnw.dapc <- dapc(gl.test2, n.pca = 4, n.da = nlevels(gl.object$pop)-1)
############
pnw.dapc <- dapc(gl.object, n.pca = 4, n.da = nlevels(gl.object$pop)-1)
dapc.results <- as.data.frame(pnw.dapc$posterior)
dapc.results$pop <- pop(gl.object)
dapc.results$indNames <- rownames(dapc.results)
dapc.results <- melt(dapc.results)
colnames(dapc.results) <- c("Original_Pop","Sample","Assigned_Pop","Posterior_membership_probability")
p <- ggplot(dapc.results, aes(x=Sample, y=Posterior_membership_probability, fill=Assigned_Pop)) +
geom_bar(stat='identity') +
scale_fill_manual(values = cols) +
facet_grid(~Original_Pop, scales = "free") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8))
p
############
pnw.dapc <- dapc(gl.object, n.pca = 4, n.da = nlevels(gl.object$pop)-1)
dapc.results <- as.data.frame(pnw.dapc$posterior)
dapc.results$pop <- pop(gl.object)
dapc.results$indNames <- rownames(dapc.results)
dapc.results <- melt(dapc.results)
View(dapc.results)
colnames(dapc.results) <- c("Original_Pop","Sample","Assigned_Pop","Posterior_membership_probability")
View(dapc.results)
q <- ggplot(dapc.results, aes(x=Sample, y=Posterior_membership_probability, fill=Assigned_Pop)) +
geom_bar(stat='identity') +
scale_fill_manual(values = cols) +
facet_grid(~Original_Pop, scales = "free") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8))
q <- ggplot(dapc.results, aes(x=Sample, y=Posterior_membership_probability, fill=Assigned_Pop)) +
geom_bar(stat='identity') +
facet_grid(~Original_Pop, scales = "free") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8))
q
runApp()
runApp()
